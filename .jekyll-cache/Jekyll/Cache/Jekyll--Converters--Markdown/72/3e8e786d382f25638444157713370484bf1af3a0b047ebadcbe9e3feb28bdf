I"z<p>Bonjour √† tous,</p>

<p>Pour faire suite √† l‚Äô<a href="http://localhost:4000/mitm-phishing">article</a> que j‚Äôavais r√©dig√© sur une attaque MITM redirigeant vers un site web spoof√©, je me suis pench√© sur une autre m√©thode plus g√©n√©rique qui utilise l‚Äôoutil <a href="https://mitmproxy.org/">mitmproxy</a>.</p>

<p>Toujours dans un contexte MITM, l‚Äôobjectif est d‚Äôidentifier les liens s√©curis√©s et redirections (<strong>https</strong>), de les ‚Äòstripper‚Äô en <strong>http</strong>, dans le but de maintenir le type de connexion suivante:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>victime &lt;-- HTTP --&gt; mitmproxy &lt;-- HTTPS --&gt; website
</code></pre></div></div>
<!--more-->

<p>Le but est, qu‚Äô√† partir d‚Äôune page non s√©curis√©e d‚Äôun site, nous puissions continuer en proposant √† notre victime une connexion en clair (http) pour analyser son trafic, mais que notre proxy r√©tablisse la connexion s√©curis√©e avec le site concern√©. Cette attaque ne pourra pas aboutir sur des sites impl√©mentant le <a href="https://https.cio.gov/hsts/">HSTS</a> (sauf si l‚Äôutilisateur ne s‚Äôest jamais connect√© au site et que le HSTS n‚Äôest pas pr√©charg√©).</p>

<p>Le stripping est effectu√© par le script <a href="https://github.com/phackt/mitm/blob/master/script/sslstrip.py">sslstrip.py</a>, qui permet √©galement de supprimer d‚Äôautres headers de s√©curit√©, notamment les fameux cookies <strong>secure</strong> que nous avons abord√©s dans un <a href="http://localhost:4000/xss-cors-csrf-partie-2-xss-cookies-session">article pr√©c√©dent</a>.</p>

<p>Vous trouverez le projet full et √† jour (de nouvelles features apparaissent r√©guli√®rement) sur mon <a href="https://github.com/phackt/mitm">github</a>.</p>

<p>J‚Äôai √©galement cr√©√© un petit script python, <a href="https://github.com/phackt/mitm/blob/master/bin/chk_poison.py">chk_poison.py</a>, qui va v√©rifier que votre ARP poisoning est op√©rationnel dans les deux sens (Victime &lt;-&gt; Passerelle). N‚Äôoubliez pas que certaines protections filtrent les r√©solutions ARP non l√©gitimes.</p>

<p>Vous pouvez tester mitmproxy sans attaque MITM, en l‚Äôutilisant en mode <a href="http://docs.mitmproxy.org/en/stable/modes.html">Regular</a>. La commande sera la suivante:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mitmproxy <span class="nt">--anticache</span> <span class="nt">--host</span> <span class="nt">--anticomp</span> <span class="nt">--noapp</span> <span class="nt">--script</span> ./sslstrip.py <span class="nt">--eventlog</span>
</code></pre></div></div>

<p>Il convient ensuite de configurer votre navigateur avec le proxy http <strong>127.0.0.1:8080</strong>. <strong>Ne mettez rien pour le proxy https</strong>, l‚Äôobjectif ici n‚Äôest pas de g√©n√©rer √† la vol√©e de faux certificats et donc nous ne souhaitons pas capturer le trafic chiffr√©.</p>

<p>*UPDATES: mitm.sh permet √©galement d‚Äôinjecter un payload javascript (ex Beef) dans les pages de la victime et d‚Äôeffectuer une attaque de social engineering par DNS spoofing.</p>

<p>Voir un exemple du projet et de l‚Äôattaque sur ce post: <a href="https://phackt.com/mitm-keep-plain-connection-example">https://phackt.com/mitm-non-hsts-example</a>*</p>

<p><strong>CONCLUSION:</strong></p>

<p><strong>Sur vos sites web, s√©curisez toutes vos pages (domaines et sous domaines). Ne laissez aucune opportunit√© √† un assaillant de manipuler le trafic.</strong></p>

<p><strong>N‚Äôh√©sitez pas √† soumettre vos id√©es, √† contribuer au github, et √† partager.</strong></p>

<p>Je vous dis √† tr√®s bient√¥t!</p>
:ET